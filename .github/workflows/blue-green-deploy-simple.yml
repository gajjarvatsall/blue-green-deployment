name: Blue-Green Deployment (Simplified)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy"
        required: false
        default: ""
      environment:
        description: "Target environment (blue/green)"
        required: false
        default: "auto"

env:
  IMAGE_NAME: ${{ github.repository_owner }}/blue-green-demo-app
  CLUSTER_NAME: blue-green-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          # Generate version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="sha-$(echo $GITHUB_SHA | cut -c1-7)"
          fi

          # Set image tag
          IMAGE_TAG="docker.io/${{ env.IMAGE_NAME }}:$VERSION"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è  Version: $VERSION"
          echo "üì¶ Image Tag: $IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.vars.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

      - name: Load Docker image to KIND
        run: |
          IMAGE_TAG="${{ steps.vars.outputs.image-tag }}"
          echo "Loading image: $IMAGE_TAG"

          # Pull and load the image
          docker pull $IMAGE_TAG
          kind load docker-image $IMAGE_TAG --name ${{ env.CLUSTER_NAME }}

      - name: Determine target environment
        id: target
        run: |
          # Get current active environment
          ACTIVE=$(kubectl get configmap blue-green-config -o jsonpath='{.data.active-environment}' 2>/dev/null || echo "blue")

          if [ "${{ github.event.inputs.environment }}" = "auto" ] || [ -z "${{ github.event.inputs.environment }}" ]; then
            if [ "$ACTIVE" = "blue" ]; then
              TARGET="green"
            else
              TARGET="blue"
            fi
          else
            TARGET="${{ github.event.inputs.environment }}"
          fi

          echo "target-env=$TARGET" >> $GITHUB_OUTPUT
          echo "current-active=$ACTIVE" >> $GITHUB_OUTPUT
          echo "üéØ Current active: $ACTIVE, Target: $TARGET"

      - name: Deploy to target environment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target-env }}"
          VERSION="${{ steps.vars.outputs.version }}"
          IMAGE_REPO="docker.io/${{ env.IMAGE_NAME }}"

          echo "üöÄ Deploying to $TARGET_ENV environment"
          echo "üì¶ Image: $IMAGE_REPO:$VERSION"

          helm upgrade --install blue-green-demo-$TARGET_ENV ./blue-green-app \
            --set environment.name=$TARGET_ENV \
            --set image.tag=$VERSION \
            --set image.repository=$IMAGE_REPO \
            --set image.pullPolicy=IfNotPresent \
            --wait --timeout=5m

      - name: Wait for deployment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target-env }}"
          DEPLOYMENT_NAME="blue-green-demo-$TARGET_ENV-blue-green-app"
          echo "Waiting for deployment: $DEPLOYMENT_NAME"
          kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s

      - name: Run health checks
        run: |
          TARGET_ENV="${{ steps.target.outputs.target-env }}"
          SERVICE_NAME="blue-green-demo-$TARGET_ENV-blue-green-app"

          # Port forward for testing
          kubectl port-forward service/$SERVICE_NAME 8080:3000 &
          PF_PID=$!
          sleep 10

          # Run health checks
          echo "üß™ Running health checks..."
          for i in {1..5}; do
            echo "Health check $i/5"
            if curl -f http://localhost:8080/health; then
              echo "‚úÖ Health check $i passed"
            else
              echo "‚ùå Health check $i failed"
              kill $PF_PID
              exit 1
            fi
            sleep 2
          done

          kill $PF_PID
          echo "‚úÖ All health checks passed"

      - name: Update active environment (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          TARGET_ENV="${{ steps.target.outputs.target-env }}"
          echo "üîÄ Updating active environment to: $TARGET_ENV"

          kubectl create configmap blue-green-config \
            --from-literal=active-environment=$TARGET_ENV \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "‚úÖ Active environment updated to $TARGET_ENV"

      - name: Deployment summary
        run: |
          echo "üéâ Deployment Summary:"
          echo "- Target Environment: ${{ steps.target.outputs.target-env }}"
          echo "- Version: ${{ steps.vars.outputs.version }}"
          echo "- Image: ${{ steps.vars.outputs.image-tag }}"
          echo "- Previous Active: ${{ steps.target.outputs.current-active }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- Traffic Switched: Yes"
          else
            echo "- Traffic Switched: No (only on main branch)"
          fi
