name: Blue-Green Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy"
        required: true
        default: "latest"
      environment:
        description: "Target environment (blue/green)"
        required: false
        default: "auto"
      auto_switch:
        description: "Auto switch traffic after health checks"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/blue-green-demo-app
  CLUSTER_NAME: blue-green-cluster

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          # Generate version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="sha-$(echo $GITHUB_SHA | cut -c1-7)"
          fi

          # Set image tag
          IMAGE_TAG="docker.io/${{ env.IMAGE_NAME }}:$VERSION"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è  Version: $VERSION"
          echo "üì¶ Image Tag: $IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.vars.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

      - name: Load Docker image to KIND
        run: |
          IMAGE_TAG="${{ steps.vars.outputs.image-tag }}"
          echo "Loading image: $IMAGE_TAG"

          # Pull and load the image
          docker pull $IMAGE_TAG
          kind load docker-image $IMAGE_TAG --name ${{ env.CLUSTER_NAME }}

  determine-environment:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      target-env: ${{ steps.determine.outputs.target-env }}
      current-active: ${{ steps.determine.outputs.current-active }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Determine target environment
        id: determine
        run: |
          ACTIVE=$(kubectl get configmap blue-green-config -o jsonpath='{.data.active-environment}' 2>/dev/null || echo "blue")
          if [ "${{ github.event.inputs.environment }}" = "auto" ] || [ -z "${{ github.event.inputs.environment }}" ]; then
            if [ "$ACTIVE" = "blue" ]; then
              TARGET="green"
            else
              TARGET="blue"
            fi
          else
            TARGET="${{ github.event.inputs.environment }}"
          fi

          echo "current-active=$ACTIVE" >> $GITHUB_OUTPUT
          echo "target-env=$TARGET" >> $GITHUB_OUTPUT
          echo "üéØ Current active: $ACTIVE, Target: $TARGET"

  deploy:
    runs-on: ubuntu-latest
    needs: [build, determine-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

      - name: Load Docker image to KIND
        run: |
          echo "üêõ Debug: Build job outputs:"
          echo "Image tag: '${{ needs.build.outputs.image-tag }}'"
          echo "Image digest: '${{ needs.build.outputs.image-digest }}'"

          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          echo "üì¶ Selected image tag: $IMAGE_TAG"

          if [ -z "$IMAGE_TAG" ]; then
            echo "‚ùå Error: IMAGE_TAG is empty"
            echo "This suggests the build job did not properly set the output"
            exit 1
          fi

          echo "üîç Pulling image: $IMAGE_TAG"
          docker pull $IMAGE_TAG

          echo "üì• Loading image into KIND cluster..."
          kind load docker-image $IMAGE_TAG --name ${{ env.CLUSTER_NAME }}

      - name: Deploy to target environment
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.target-env }}
        run: |
          echo "üêõ Debug: Build job outputs in deploy:"
          echo "Image tag: '${{ needs.build.outputs.image-tag }}'"
          echo "Image digest: '${{ needs.build.outputs.image-digest }}'"

          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          if [ -z "$IMAGE_TAG" ]; then
            echo "‚ùå Error: IMAGE_TAG is empty in deploy step"
            echo "This indicates the build job output is not being passed correctly"
            exit 1
          fi

          VERSION=$(echo $IMAGE_TAG | cut -d: -f2)
          IMAGE_REPO=$(echo $IMAGE_TAG | cut -d: -f1)

          echo "üöÄ Deploying to $TARGET_ENV"
          echo "üñºÔ∏è  Image: $IMAGE_TAG"
          echo "üîñ Version: $VERSION"
          echo "üìç Repo: $IMAGE_REPO"

          helm upgrade --install blue-green-demo-$TARGET_ENV ./blue-green-app \
            --set environment.name=$TARGET_ENV \
            --set image.tag=$VERSION \
            --set image.repository=$IMAGE_REPO \
            --wait --timeout=5m

      - name: Wait for deployment
        run: |
          TARGET_ENV=${{ needs.determine-environment.outputs.target-env }}
          DEPLOYMENT_NAME="blue-green-demo-$TARGET_ENV-blue-green-app"
          echo "Waiting for deployment: $DEPLOYMENT_NAME"
          kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy, determine-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Run health checks
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh ${{ needs.determine-environment.outputs.target-env }}

      - name: Performance test
        run: |
          TARGET_ENV=${{ needs.determine-environment.outputs.target-env }}
          SERVICE_NAME="blue-green-demo-$TARGET_ENV-blue-green-app"
          kubectl port-forward service/$SERVICE_NAME 8080:3000 &
          PF_PID=$!
          sleep 5

          for i in {1..10}; do
            curl -f http://localhost:8080/health || exit 1
            curl -f http://localhost:8080/ || exit 1
          done

          kill $PF_PID

  traffic-switch:
    runs-on: ubuntu-latest
    needs: [health-check, determine-environment]
    if: ${{ github.event.inputs.auto_switch == 'true' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up KIND cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Switch traffic
        run: |
          chmod +x ./scripts/traffic-switch.sh
          ./scripts/traffic-switch.sh ${{ needs.determine-environment.outputs.target-env }}

      - name: Verify traffic switch
        run: |
          sleep 10
          kubectl port-forward service/ingress-nginx-controller -n ingress-nginx 8080:80 &
          PF_PID=$!
          sleep 5

          for i in {1..10}; do
            RESPONSE=$(curl -s http://localhost:8080/api/version)
            echo "Response $i: $RESPONSE"
          done

          kill $PF_PID

  notify:
    runs-on: ubuntu-latest
    needs: [traffic-switch, determine-environment]
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.traffic-switch.result }}" = "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üîÅ Traffic switched to: ${{ needs.determine-environment.outputs.target-env }}"
          else
            echo "‚ùå Deployment failed or traffic switch was skipped"
          fi
