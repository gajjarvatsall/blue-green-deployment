name: Blue-Green Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy to environment"
        required: true
        default: "green"
        type: choice
        options:
          - blue
          - green
      version:
        description: "Version tag"
        required: true
        default: "latest"

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/blue-green-demo-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          ./scripts/deploy-staging.sh ${{ needs.build.outputs.image-tag }}

  deploy-blue-green:
    name: Blue-Green Production Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Determine deployment environment
        id: environment
        run: |
          export KUBECONFIG=kubeconfig
          CURRENT_ENV=$(kubectl get configmap deployment-config -o jsonpath='{.data.active-environment}' 2>/dev/null || echo "blue")
          if [ "$CURRENT_ENV" = "blue" ]; then
            echo "target=green" >> $GITHUB_OUTPUT
            echo "current=blue" >> $GITHUB_OUTPUT
          else
            echo "target=blue" >> $GITHUB_OUTPUT
            echo "current=green" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to target environment
        run: |
          export KUBECONFIG=kubeconfig
          echo "üöÄ Deploying to ${{ steps.environment.outputs.target }} environment"
          ./scripts/deploy-${{ steps.environment.outputs.target }}.sh ${{ needs.build.outputs.image-tag }}

      - name: Run health checks
        id: health-check
        run: |
          export KUBECONFIG=kubeconfig
          ./scripts/health-check.sh ${{ steps.environment.outputs.target }}

      - name: Switch traffic
        if: steps.health-check.outcome == 'success'
        run: |
          export KUBECONFIG=kubeconfig
          ./scripts/switch-traffic.sh ${{ steps.environment.outputs.target }}

      - name: Rollback on failure
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig
          echo "‚ùå Deployment failed, rolling back..."
          ./scripts/rollback.sh ${{ steps.environment.outputs.current }}
